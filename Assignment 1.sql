--Write an SQL query to retrieve the names and emails of all customers.

select Firstname, Lastname, Email from Customers

--Write an SQL query to list all orders with their order dates and corresponding customer 
names.

select Orderdate, Firstname 
from Orders
join Customers
on Customers.CustomerID=Orders.CustomerID

--Write an SQL query to insert a new customer record into the "Customers" table. Include 
customer information such as name, email, and address.

insert into Customers values(11,'Neena','Dev','dnina@gmail.com','8463256982','Chandigarh')

--Write an SQL query to update the prices of all electronic gadgets in the "Products" table by 
increasing them by 10%.

update Products
set Price=Price*1.1
where Proddesc='Electronics'

--Write an SQL query to delete a specific order and its associated order details from the 
"Orders" and "OrderDetails" tables. Allow users to input the order ID as a parameter.

declare @orderid int
set @orderid = 5
delete from Orders
where OrderID=@orderid

delete from OrderDetails
where OrderID=@orderid

--Write an SQL query to insert a new order into the "Orders" table. Include the customer ID, 
order date, and any other necessary information.

insert into Orders values(11,5,'2023-10-22',5500)

--Write an SQL query to update the contact information (e.g., email and address) of a specific 
customer in the "Customers" table. Allow users to input the customer ID and new contact 
information.

declare @newphone int
set @newphone=8852156335
declare
declare @newid int
set @newid=2
update Customers
set Phone=@newphone
where CustomerID=@newid

--Write an SQL query to insert a new electronic gadget product into the "Products" table, 
including product name, category, price, and any other relevant details.

insert into Products values(11,'WifiExtender','Electronics',1500)

--Write an SQL query to update the status of a specific order in the "Orders" table (e.g., from 
"Pending" to "Shipped"). Allow users to input the order ID and the new status.

declare @orderid int
declare @orderstatus varchar(10)
set @orderid=3
set@orderstatus='Delivered'
update Orders
set OrderStatus=@orderstatus
where OrderId=@orderid


---Aggregate Functions Questions---
use TechShopDB
--Q. 1)Write an SQL query to find out which customers have not placed any orders.
select c.CustomerID, c.Firstname, c.Lastname
from Customers c
left join Orders o on c.CustomerID=o.CustomerID
where o.CustomerID is null

--Q. 2)Write an SQL query to find the total number of products available for sale. 
select sum(Quantityinstock)
from Inventory

--Q. 3)Write an SQL query to calculate the total revenue generated by TechShop.
select sum(Totalamount)
from Orders

--Q. 4)Write an SQL query to calculate the average quantity ordered for products in a specific category. Allow users to input the category name as a parameter.
--avg(Orderdetails.Quantityinstock)
declare @cat varchar(20)
set @cat='Home appliance'
select avg(o.Quantityinstock), p.Proddesc
from OrderDetails o
join Products p on o.ProductID=p.ProductID
where p.Proddesc=@cat
group by p.Proddesc

select * from Products
select * from OrderDetails

--Q. 5)Write an SQL query to calculate the total revenue generated by a specific customer. Allow users to input the customer ID as a parameter.
declare @custid int
set @custid=2
select sum(Totalamount)
from Orders
where CustomerID=@custid

--Q. 6)Write an SQL query to find the customers who have placed the most orders. List their names and the number of orders they've placed.
select top 1
Customers.CustomerID, Customers.Firstname, Customers.Lastname, count(*) as ordcount
from Customers
join orders on Customers.CustomerID=Orders.CustomerID
group by Customers.CustomerID, Customers.Firstname, Customers.Lastname
Order by ordcount desc

select * from Orders

--Q. 7)Write an SQL query to find the most popular product category, which is the one with the highest total quantity ordered across all orders.
select top 1 p.Proddesc, sum(Quantityinstock) as q
from Products p
join OrderDetails o on p.ProductID=o.ProductID
group by p.Proddesc
order by q desc

select * from OrderDetails
select * from Products

--Q. 8) Write an SQL query to find the customer who has spent the most money (highest total revenue)  on electronic gadgets. List their name and total spending.
select top 1 c.Firstname, c.Lastname, sum(Totalamount) as totalsum
from Customers c
join Orders o on c.CustomerID=o.CustomerID
join OrderDetails od on o.OrderID=od.OrderID
join Products p on od.ProductID=p.ProductID
where p.Proddesc='Electronics'
group by c.Firstname, c.Lastname
order by totalsum desc

--Q. 9) Write an SQL query to calculate the average order value (total revenue divided by the number of orders) for all customers.
select avg(Totalamount) as avgordval
from Orders

--Q. 10) Write an SQL query to find the total number of orders placed by each customer and list their names along with the order count
select c.CustomerID, c.Firstname, c.Lastname, count(OrderID) as ordid
from Customers c
join Orders o on c.CustomerID=o.CustomerID
group by c.CustomerID, c.Firstname, c.Lastname

select * from Orders


---Join Questions---
--Q. 1) Write an SQL query to retrieve a list of all orders along with customer information (e.g.customer name) for each order.
select o.orderID, c.CustomerID, c.Firstname, c.Lastname, o.Orderdate, o.Totalamount
from Customers c
join Orders o on c.CustomerID=o.CustomerID

--Q. 2) Write an SQL query to find the total revenue generated by each electronic gadget product. Include the product name and the total revenue.
select p.Productname, sum(o.Totalamount) as totalamount
from Orders o
join OrderDetails od on o.OrderID=od.OrderID
join Products p on od.ProductID=p.ProductID
where p.Proddesc='Electronics'
group by p.Productname

--Q. 3) Write an SQL query to list all customers who have made at least one purchase. Include their names and contact information.
select distinct c.CustomerID, c.Firstname, c.Lastname, c.Email, c.Phone
from Customers c
join Orders o on c.CustomerID=o.CustomerID

--Q. 4) Write an SQL query to find the most popular electronic gadget, which is the one with the highest total quantity ordered. Include the product name and the total quantity ordered.
select top 1 p.Productname, o.Quantityinstock as QuantityOrdered
from OrderDetails o
join Products p on o.ProductID=p.ProductID
where p.Proddesc='Electronics'
order by QuantityOrdered desc

--Q. 5) Write an SQL query to retrieve a list of electronic gadgets along with their corresponding categories.
select Productname, Proddesc
from Products where Proddesc='Electronics'

--Q. 6) Write an SQL query to calculate the average order value for each customer. Include the customer's name and their average order value.
select c.CustomerID, c.Firstname, c.Lastname, avg(Totalamount) as AverageOrderValue
from Customers c
join Orders o on c.CustomerID=o.CustomerID
group by c.CustomerID, c.Firstname, c.Lastname

--Q. 7) Write an SQL query to find the order with the highest total revenue. Include the order ID, customer information, and the total revenue.
select top 1 o.OrderID, c.CustomerID, c.Firstname, c.Lastname, o.Totalamount
from Customers c
join Orders o on c.CustomerID=o.CustomerID
order by o.Totalamount desc

--Q. 8) Write an SQL query to list electronic gadgets and the number of times each product has been ordered.
select p.ProductID, p.Productname, count(o.OrderID) as ordercount
from Products p
join OrderDetails o on p.ProductID=o.ProductID
where p.Proddesc='Electronics'
group by p.ProductID, p.Productname

--Q. 9) Write an SQL query to find customers who have purchased a specific electronic gadget product. Allow users to input the product name as a parameter.
declare @itemname varchar(20)
set @itemname='Motog4'
select c.CustomerID, c.Firstname, c.Lastname
from Customers c
join Orders o on c.CustomerID=o.CustomerID
join OrderDetails od on o.OrderID=od.OrderdetailID
join Products p on od.ProductID=p.ProductID
where p.Productname=@itemname

--Q. 10) Write an SQL query to calculate the total revenue generated by all orders placed within a specific time period. Allow users to input the start and end dates as parameters.
declare @startdate date
declare @enddate date
set @startdate='2023-05-01'
set @enddate='2023-08-31'
select sum(Totalamount)
from Orders
where Orderdate between @startdate and @enddate
